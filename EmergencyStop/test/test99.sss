#     Project: openETCS
#      Module: EmergencyStop / test
# Description: Test of TA_EmergencyStop/Manage_EmergencyStop
source lib.tcl

set eut TA_EmergencyStop::Manage_EmergencyStop

proc input {t_train {nid_engine 321}} {
  SSM::set "$::eut/t_train" $t_train
  SSM::set "$::eut/trainProps.nid_engine" $nid_engine
}

proc checkOutput {tripTrain rejectNewMA} {
  SSM::check "$::eut/tripTrain" $tripTrain
  SSM::check "$::eut/rejectNewMA" $rejectNewMA
} 

proc checkMsg147 {present {t_train 0} {nid_em 0}} {
  set h "$::eut/message147.header"
  SSM::check "$::eut/message147.present" $present
  SSM::check "$h.xNID_EM" $nid_em
}

proc get_UES_OpVar {var} {
  SSM::get "EmergencyStop::Manage_EmergencyStop/EmergencyStop::ES_Process_Unconditional 1/$var"
}

proc nop {} {
  set_InMsg_None "$::eut/messageIn"
}


puts "running test99"

# 1) nop
nop
checkOutput false false 
checkMsg147 false
SSM::cycle
print_activeStates

# 2) receive Msg16
set_Msg16 "$eut/messageIn" 4321
input 20
checkOutput true true
checkMsg147 true 20 4321
SSM::cycle
print_activeStates

# 3) nop
set_InMsg_None "$::eut/messageIn"
input 30
checkOutput true true
checkMsg147 false
SSM::cycle
print_activeStates

# 4) receive Msg18
set_Msg18 "$eut/messageIn" 4321
input 40
checkOutput false false
checkMsg147 false
SSM::cycle
print_activeStates

# 5) nop
set_InMsg_None "$::eut/messageIn"
input 50
checkOutput false false
checkMsg147 false
SSM::cycle
print_activeStates

# 6) receive Msg16
set_Msg16 "$eut/messageIn" 5432
input 60
checkOutput true true
checkMsg147 true 50 5432
SSM::cycle
print_activeStates

# 7) receive Msg18 with wrong ID
set_InMsg_None "$::eut/messageIn"
#set_Msg18 "$eut/messageIn" 4321
#input 70
#checkOutput true true
#checkMsg147 false
SSM::cycle
puts [get_UES_OpVar active_nid_em]
print_activeStates

# 8) nop
set_InMsg_None "$::eut/messageIn"
input 80
checkOutput true true
checkMsg147 false
SSM::cycle
print_activeStates

# 9) receive Msg18
set_Msg18 "$eut/messageIn" 5432
input 90
checkOutput false false
checkMsg147 false
SSM::cycle
print_activeStates


